<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:helper="clr-namespace:GrayThemeUI.Helper">
    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="pack://application:,,,/GrayThemeUI;component/Style/Overlay.xaml"/>
    </ResourceDictionary.MergedDictionaries>
    <!-- Square Button  -->
    <Style x:Key="GrayThemeUI.Button.Square" TargetType="Button">
        <Setter Property="FontSize" Value="{DynamicResource GrayThemeUI.Internal.FontSize.Default}"/>
        <Setter Property="BorderThickness" Value="{DynamicResource GrayThemeUI.Internal.Thickness.Default}"/>
        <Setter Property="BorderBrush">
            <Setter.Value>
                <SolidColorBrush Color="{DynamicResource GrayThemeUI.Internal.DefaultBrush.Outline}"/>
            </Setter.Value>
        </Setter>
        <Setter Property="Foreground">
            <Setter.Value>
                <SolidColorBrush Color="{DynamicResource GrayThemeUI.Internal.DefaultBrush.Foreground}"/>
            </Setter.Value>
        </Setter>
        <Setter Property="Background">
            <Setter.Value>
                <SolidColorBrush Color="{DynamicResource GrayThemeUI.Internal.DefaultBrush.Background}"/>
            </Setter.Value>
        </Setter>
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="helper:OverlayHelper.IsDefault" Value="True"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Grid>
                        <Border x:Name="border" HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
                            <Border.Background>
                                <TemplateBinding Property="Background"/>
                            </Border.Background>
                            <Border.BorderThickness>
                                <TemplateBinding Property="BorderThickness"/>
                            </Border.BorderThickness>
                            <Border.BorderBrush>
                                <TemplateBinding Property="BorderBrush"/>
                            </Border.BorderBrush>
                            <Border.SnapsToDevicePixels>
                                <TemplateBinding Property="SnapsToDevicePixels"/>
                            </Border.SnapsToDevicePixels>
                        </Border>
                        <Border x:Name="overlay" Style="{StaticResource GrayThemeUI.Overlay.Border}">
                            <Border.BorderThickness>
                                <TemplateBinding Property="BorderThickness"/>
                            </Border.BorderThickness>
                            <Border.SnapsToDevicePixels>
                                <TemplateBinding Property="SnapsToDevicePixels"/>
                            </Border.SnapsToDevicePixels>
                            <helper:OverlayHelper.IsDefault>
                                <TemplateBinding Property="helper:OverlayHelper.IsDefault"/>
                            </helper:OverlayHelper.IsDefault>
                        </Border>
                        <ContentPresenter>
                            <ContentPresenter.HorizontalAlignment>
                                <TemplateBinding Property="HorizontalContentAlignment"/>
                            </ContentPresenter.HorizontalAlignment>
                            <ContentPresenter.VerticalAlignment>
                                <TemplateBinding Property="VerticalContentAlignment"/>
                            </ContentPresenter.VerticalAlignment>
                            <ContentPresenter.SnapsToDevicePixels>
                                <TemplateBinding Property="SnapsToDevicePixels"/>
                            </ContentPresenter.SnapsToDevicePixels>
                            <ContentPresenter.Content>
                                <TemplateBinding Property="Content"/>
                            </ContentPresenter.Content>
                        </ContentPresenter>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="overlay" Property="helper:OverlayHelper.IsMouseOver" Value="True"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="overlay" Property="helper:OverlayHelper.IsActive" Value="True"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="overlay" Property="helper:OverlayHelper.IsDisable" Value="True"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Foreground" Value="{DynamicResource GrayThemeUI.Internal.Theme.Brush.Foreground.Disable}"/>
            </Trigger>
        </Style.Triggers>
    </Style>
    <!-- ImageMask Button  -->
    <Style x:Key="GrayThemeUI.Button.ImageMask" TargetType="Button">
        <Setter Property="FontSize" Value="{DynamicResource GrayThemeUI.Internal.FontSize.Default}"/>
        <Setter Property="BorderThickness" Value="{DynamicResource GrayThemeUI.Internal.Thickness.Default}"/>
        <Setter Property="BorderBrush">
            <Setter.Value>
                <SolidColorBrush Color="{DynamicResource GrayThemeUI.Internal.DefaultBrush.Outline}"/>
            </Setter.Value>
        </Setter>
        <Setter Property="Foreground">
            <Setter.Value>
                <SolidColorBrush Color="{DynamicResource GrayThemeUI.Internal.DefaultBrush.Mask}"/>
            </Setter.Value>
        </Setter>
        <Setter Property="Background">
            <Setter.Value>
                <SolidColorBrush Color="{DynamicResource GrayThemeUI.Internal.DefaultBrush.Background}"/>
            </Setter.Value>
        </Setter>
        <Setter Property="Width">
            <Setter.Value>
                <Binding RelativeSource="{RelativeSource TemplatedParent}" Path="(helper:MaskHelper.DefaultMask).ImageSource.Width"/>
            </Setter.Value>
        </Setter>
        <Setter Property="Height">
            <Setter.Value>
                <Binding RelativeSource="{RelativeSource TemplatedParent}" Path="(helper:MaskHelper.DefaultMask).ImageSource.Height"/>
            </Setter.Value>
        </Setter>
        <Setter Property="helper:OverlayHelper.IsDefault" Value="False"/>
        <Setter Property="helper:MaskHelper.DefaultMask">
            <Setter.Value>
                <ImageBrush ImageSource="pack://application:,,,/GrayThemeUI;component/Resource/Mask/empty.png"/>
            </Setter.Value>
        </Setter>
        <Setter Property="helper:MaskHelper.Background_Overlay_Visibility" Value="Hidden"/>
        <Setter Property="helper:MaskHelper.Background_Overlay_Outline_Thickness" Value="0.0"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Grid>
                        <Grid.Background>
                            <TemplateBinding Property="Background"/>
                        </Grid.Background>
                        <!-- Mask Border -->
                        <Border x:Name="border" BorderBrush="Transparent" HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
                            <Border.Background>
                                <TemplateBinding Property="Foreground"/>
                            </Border.Background>
                            <Border.BorderThickness>
                                <DynamicResource ResourceKey="GrayThemeUI.Internal.Thickness.Zero"/>
                            </Border.BorderThickness>
                            <Border.OpacityMask>
                                <Binding RelativeSource="{RelativeSource TemplatedParent}" Path="(helper:MaskHelper.DefaultMask)"/>
                            </Border.OpacityMask>
                            <Border.SnapsToDevicePixels>
                                <TemplateBinding Property="SnapsToDevicePixels"/>
                            </Border.SnapsToDevicePixels>
                        </Border>
                        <!-- Overlay Mask -->
                        <Border x:Name="overlayMask" Style="{StaticResource GrayThemeUI.Overlay.MaskBorder}">
                            <Border.OpacityMask>
                                <Binding RelativeSource="{RelativeSource TemplatedParent}" Path="(helper:MaskHelper.DefaultMask)"/>
                            </Border.OpacityMask>
                            <Border.SnapsToDevicePixels>
                                <TemplateBinding Property="SnapsToDevicePixels"/>
                            </Border.SnapsToDevicePixels>
                        </Border>
                        <!-- Overlay -->
                        <Border x:Name="overlay" Style="{StaticResource GrayThemeUI.Overlay.Border}">
                            <Border.BorderThickness>
                                <TemplateBinding Property="helper:MaskHelper.Background_Overlay_Outline_Thickness"/>
                            </Border.BorderThickness>
                            <Border.SnapsToDevicePixels>
                                <TemplateBinding Property="SnapsToDevicePixels"/>
                            </Border.SnapsToDevicePixels>
                            <Border.Visibility>
                                <TemplateBinding Property="helper:MaskHelper.Background_Overlay_Visibility"/>
                            </Border.Visibility>
                            <helper:OverlayHelper.IsDefault>
                                <TemplateBinding Property="helper:OverlayHelper.IsDefault"/>
                            </helper:OverlayHelper.IsDefault>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="overlay" Property="helper:OverlayHelper.IsMouseOver" Value="True"/>
                            <Setter TargetName="overlayMask" Property="helper:OverlayHelper.IsMouseOver" Value="True"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="overlay" Property="helper:OverlayHelper.IsActive" Value="True"/>
                            <Setter TargetName="overlayMask" Property="helper:OverlayHelper.IsActive" Value="True"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="overlay" Property="helper:OverlayHelper.IsDisable" Value="True"/>
                            <Setter TargetName="overlayMask" Property="helper:OverlayHelper.IsDisable" Value="True"/>
                            <Setter TargetName="border" Property="Background">
                                <Setter.Value>
                                    <DynamicResource ResourceKey="GrayThemeUI.Internal.Theme.Brush.Foreground.Disable"/>
                                </Setter.Value>
                            </Setter>
                            
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- ToggleButton -->
    <Style x:Key="GrayThemeUI.ToggleButton.Square" TargetType="ToggleButton">
        <Setter Property="FontSize" Value="{DynamicResource GrayThemeUI.Internal.FontSize.Default}"/>
        <Setter Property="BorderThickness" Value="{DynamicResource GrayThemeUI.Internal.Thickness.Default}"/>
        <Setter Property="BorderBrush">
            <Setter.Value>
                <SolidColorBrush Color="{DynamicResource GrayThemeUI.Internal.DefaultBrush.Outline}"/>
            </Setter.Value>
        </Setter>
        <Setter Property="Foreground">
            <Setter.Value>
                <SolidColorBrush Color="{DynamicResource GrayThemeUI.Internal.DefaultBrush.Foreground}"/>
            </Setter.Value>
        </Setter>
        <Setter Property="Background">
            <Setter.Value>
                <SolidColorBrush Color="{DynamicResource GrayThemeUI.Internal.DefaultBrush.Background}"/>
            </Setter.Value>
        </Setter>
        <Setter Property="helper:OverlayHelper.IsDefault" Value="True"/>
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ToggleButton">
                    <Grid>
                        <Border x:Name="border" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" SnapsToDevicePixels="True">
                            <Border.Background>
                                <TemplateBinding Property="Background"/>
                            </Border.Background>
                            <Border.BorderThickness>
                                <TemplateBinding Property="BorderThickness"/>
                            </Border.BorderThickness>
                            <Border.BorderBrush>
                                <TemplateBinding Property="BorderBrush"/>
                            </Border.BorderBrush>
                        </Border>
                        <Border x:Name="overlay" Style="{StaticResource GrayThemeUI.Overlay.Border}">
                            <Border.BorderThickness>
                                <TemplateBinding Property="BorderThickness"/>
                            </Border.BorderThickness>
                            <helper:OverlayHelper.IsDefault>
                                <TemplateBinding Property="helper:OverlayHelper.IsDefault"/>
                            </helper:OverlayHelper.IsDefault>
                        </Border>
                        <ContentPresenter SnapsToDevicePixels="True">
                            <ContentPresenter.HorizontalAlignment>
                                <TemplateBinding Property="HorizontalContentAlignment"/>
                            </ContentPresenter.HorizontalAlignment>
                            <ContentPresenter.VerticalAlignment>
                                <TemplateBinding Property="VerticalContentAlignment"/>
                            </ContentPresenter.VerticalAlignment>
                            <ContentPresenter.Content>
                                <TemplateBinding Property="Content"/>
                            </ContentPresenter.Content>
                        </ContentPresenter>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="overlay" Property="helper:OverlayHelper.IsMouseOver" Value="True"/>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter TargetName="overlay" Property="helper:OverlayHelper.IsActive" Value="True"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="overlay" Property="helper:OverlayHelper.IsDisable" Value="True"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Foreground" Value="{DynamicResource GrayThemeUI.Internal.Theme.Brush.Foreground.Disable}"/>
            </Trigger>
        </Style.Triggers>
    </Style>
    
    <!-- ImageMask ToggleButton  -->
    <Style x:Key="GrayThemeUI.ToggleButton.ImageMask" TargetType="ToggleButton">
        <Setter Property="FontSize" Value="{DynamicResource GrayThemeUI.Internal.FontSize.Default}"/>
        <Setter Property="BorderThickness" Value="{DynamicResource GrayThemeUI.Internal.Thickness.Default}"/>
        <Setter Property="BorderBrush">
            <Setter.Value>
                <SolidColorBrush Color="{DynamicResource GrayThemeUI.Internal.DefaultBrush.Outline}"/>
            </Setter.Value>
        </Setter>
        <Setter Property="Foreground">
            <Setter.Value>
                <SolidColorBrush Color="{DynamicResource GrayThemeUI.Internal.DefaultBrush.Mask}"/>
            </Setter.Value>
        </Setter>
        <Setter Property="Background">
            <Setter.Value>
                <SolidColorBrush Color="{DynamicResource GrayThemeUI.Internal.DefaultBrush.Background}"/>
            </Setter.Value>
        </Setter>
        <Setter Property="Width">
            <Setter.Value>
                <Binding RelativeSource="{RelativeSource TemplatedParent}" Path="(helper:MaskHelper.DefaultMask).ImageSource.Width"/>
            </Setter.Value>
        </Setter>
        <Setter Property="Height">
            <Setter.Value>
                <Binding RelativeSource="{RelativeSource TemplatedParent}" Path="(helper:MaskHelper.DefaultMask).ImageSource.Height"/>
            </Setter.Value>
        </Setter>
        <Setter Property="helper:OverlayHelper.IsDefault" Value="False"/>
        <Setter Property="helper:MaskHelper.DefaultMask">
            <Setter.Value>
                <ImageBrush ImageSource="pack://application:,,,/GrayThemeUI;component/Resource/Mask/empty.png"/>
            </Setter.Value>
        </Setter>
        <Setter Property="helper:MaskHelper.CheckedMask">
            <Setter.Value>
                <ImageBrush ImageSource="pack://application:,,,/GrayThemeUI;component/Resource/Mask/empty.png"/>
            </Setter.Value>
        </Setter>
        <Setter Property="helper:MaskHelper.Background_Overlay_Visibility" Value="Hidden"/>
        <Setter Property="helper:MaskHelper.Background_Overlay_Outline_Thickness" Value="0.0"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ToggleButton">
                    <Grid>
                        <Grid.Background>
                            <TemplateBinding Property="Background"/>
                        </Grid.Background>
                        <!-- Mask Border -->
                        <Border x:Name="border" BorderBrush="Transparent" HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
                            <Border.Background>
                                <TemplateBinding Property="Foreground"/>
                            </Border.Background>
                            <Border.BorderThickness>
                                <DynamicResource ResourceKey="GrayThemeUI.Internal.Thickness.Zero"/>
                            </Border.BorderThickness>
                            <Border.OpacityMask>
                                <Binding RelativeSource="{RelativeSource TemplatedParent}" Path="(helper:MaskHelper.DefaultMask)"/>
                            </Border.OpacityMask>
                            <Border.SnapsToDevicePixels>
                                <TemplateBinding Property="SnapsToDevicePixels"/>
                            </Border.SnapsToDevicePixels>
                        </Border>
                        <!-- Overlay Mask -->
                        <Border x:Name="overlayMask" Style="{StaticResource GrayThemeUI.Overlay.MaskBorder}">
                            <Border.OpacityMask>
                                <Binding RelativeSource="{RelativeSource TemplatedParent}" Path="(helper:MaskHelper.DefaultMask)"/>
                            </Border.OpacityMask>
                            <Border.SnapsToDevicePixels>
                                <TemplateBinding Property="SnapsToDevicePixels"/>
                            </Border.SnapsToDevicePixels>
                        </Border>
                        <!-- Overlay -->
                        <Border x:Name="overlay" Style="{StaticResource GrayThemeUI.Overlay.Border}">
                            <Border.BorderThickness>
                                <TemplateBinding Property="helper:MaskHelper.Background_Overlay_Outline_Thickness"/>
                            </Border.BorderThickness>
                            <Border.SnapsToDevicePixels>
                                <TemplateBinding Property="SnapsToDevicePixels"/>
                            </Border.SnapsToDevicePixels>
                            <Border.Visibility>
                                <TemplateBinding Property="helper:MaskHelper.Background_Overlay_Visibility"/>
                            </Border.Visibility>
                            <helper:OverlayHelper.IsDefault>
                                <TemplateBinding Property="helper:OverlayHelper.IsDefault"/>
                            </helper:OverlayHelper.IsDefault>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="overlay" Property="helper:OverlayHelper.IsMouseOver" Value="True"/>
                            <Setter TargetName="overlayMask" Property="helper:OverlayHelper.IsMouseOver" Value="True"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="overlay" Property="helper:OverlayHelper.IsActive" Value="True"/>
                            <Setter TargetName="overlayMask" Property="helper:OverlayHelper.IsActive" Value="True"/>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter TargetName="border" Property="OpacityMask">
                                <Setter.Value>
                                    <Binding>
                                        <Binding.Path>
                                            (helper:MaskHelper.CheckedMask)
                                        </Binding.Path>
                                        <Binding.RelativeSource>
                                            <RelativeSource Mode="TemplatedParent"/>
                                        </Binding.RelativeSource>
                                    </Binding>
                                </Setter.Value>
                            </Setter>
                            <Setter TargetName="overlayMask" Property="OpacityMask">
                                <Setter.Value>
                                    <Binding>
                                        <Binding.Path>
                                            (helper:MaskHelper.CheckedMask)
                                        </Binding.Path>
                                        <Binding.RelativeSource>
                                            <RelativeSource Mode="TemplatedParent"/>
                                        </Binding.RelativeSource>
                                    </Binding>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="False">
                            <Setter TargetName="border" Property="OpacityMask">
                                <Setter.Value>
                                    <Binding>
                                        <Binding.Path>
                                            (helper:MaskHelper.DefaultMask)
                                        </Binding.Path>
                                        <Binding.RelativeSource>
                                            <RelativeSource Mode="TemplatedParent"/>
                                        </Binding.RelativeSource>
                                    </Binding>
                                </Setter.Value>
                            </Setter>
                            <Setter TargetName="overlayMask" Property="OpacityMask">
                                <Setter.Value>
                                    <Binding>
                                        <Binding.Path>
                                            (helper:MaskHelper.DefaultMask)
                                        </Binding.Path>
                                        <Binding.RelativeSource>
                                            <RelativeSource Mode="TemplatedParent"/>
                                        </Binding.RelativeSource>
                                    </Binding>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="overlay" Property="helper:OverlayHelper.IsDisable" Value="True"/>
                            <Setter TargetName="overlayMask" Property="helper:OverlayHelper.IsDisable" Value="True"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
</ResourceDictionary>