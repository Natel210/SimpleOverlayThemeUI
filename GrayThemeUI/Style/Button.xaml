<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:theme="clr-namespace:GrayThemeUI.Theme"
                    xmlns:helper="clr-namespace:GrayThemeUI.Helper">
    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="pack://application:,,,/GrayThemeUI;component/Theme/Common.xaml"/>
        <theme:ThemeSetting/>
    </ResourceDictionary.MergedDictionaries>
    <!-- Square Button  -->
    <Style x:Key="GrayThemeUI.Button.Square" TargetType="Button">
        <Setter Property="FontSize" Value="{DynamicResource GrayThemeUI.Internal.Common.FontSize.Default}"/>
        <Setter Property="BorderThickness" Value="{DynamicResource GrayThemeUI.Internal.Common.Thickness.Default}"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="Foreground" Value="{DynamicResource GrayThemeUI.Internal.Theme.Brush.Foreground}"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Grid>
                        <Border x:Name="border" Background="{TemplateBinding Background}" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}" HorizontalAlignment="Stretch" VerticalAlignment="Stretch"/>
                        <Border x:Name="overlay">
                            <Border.Background>
                                <DynamicResource ResourceKey="GrayThemeUI.Internal.Theme.Overlay.Background.Brush.Default"/>
                            </Border.Background>
                            <Border.BorderThickness>
                                <TemplateBinding Property="BorderThickness"/>
                            </Border.BorderThickness>
                        </Border> Background="Transparent" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="Transparent" HorizontalAlignment="Stretch" VerticalAlignment="Stretch"/>
                        <ContentPresenter Content="{TemplateBinding Content}" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Margin="5"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="overlay" Property="BorderBrush" Value="{DynamicResource GrayThemeUI.Internal.Theme.Overlay.Border.Brush.MouseOver}"/>
                            <Setter TargetName="overlay" Property="Background" Value="{DynamicResource GrayThemeUI.Internal.Theme.Overlay.Background.Brush.MouseOver}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="overlay" Property="BorderBrush" Value="{DynamicResource GrayThemeUI.Internal.Theme.Overlay.Border.Brush.Focus}"/>
                            <Setter TargetName="overlay" Property="Background" Value="{DynamicResource GrayThemeUI.Internal.Theme.Overlay.Background.Brush.Focus}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="overlay" Property="BorderBrush" Value="{DynamicResource GrayThemeUI.Internal.Theme.Overlay.Border.Brush.Disable}"/>
                            <Setter TargetName="overlay" Property="Background" Value="{DynamicResource GrayThemeUI.Internal.Theme.Overlay.Background.Brush.Disable}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Foreground">
                    <Setter.Value>
                        <DynamicResource ResourceKey="GrayThemeUI.Theme.Foreground.Disable"/>
                    </Setter.Value>
                </Setter>
            </Trigger>
        </Style.Triggers>
    </Style>
    <!-- ImageMask Button  -->
    <Style x:Key="GrayThemeUI.Button.ImageMask" TargetType="Button">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Foreground" Value="{DynamicResource GrayThemeUI.Common.MaskColor}"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="helper:ButtonHelper.DefaultMask" Value="{StaticResource GrayThemeUI.Mask.Empty}"/>
        <Setter Property="Width">
            <Setter.Value>
                <Binding RelativeSource="{RelativeSource TemplatedParent}" Path="(helper:ButtonHelper.DefaultMask).ImageSource.Width"/>
            </Setter.Value>
        </Setter>
        <Setter Property="Height">
            <Setter.Value>
                <Binding RelativeSource="{RelativeSource TemplatedParent}" Path="(helper:ButtonHelper.DefaultMask).ImageSource.Height"/>
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Grid>
                        <!-- Mask Border -->
                        <Border x:Name="toggleMaxRestoreMask" Background="{TemplateBinding Foreground}">
                            <Border.OpacityMask>
                                <Binding RelativeSource="{RelativeSource TemplatedParent}" Path="(helper:ButtonHelper.DefaultMask)"/>
                            </Border.OpacityMask>
                            <Border.VerticalAlignment>
                                Stretch
                            </Border.VerticalAlignment>
                            <Border.HorizontalAlignment>
                                Stretch
                            </Border.HorizontalAlignment>
                            <Border.BorderThickness>
                                0
                            </Border.BorderThickness>
                        </Border>

                        <!-- Overlay Mask -->
                        <Border x:Name="toggleMaxRestoreOverlayMask">
                            <Border.Background>
                                Transparent
                            </Border.Background>
                            <Border.OpacityMask>
                                <Binding RelativeSource="{RelativeSource TemplatedParent}" Path="(helper:ButtonHelper.DefaultMask)"/>
                            </Border.OpacityMask>
                            <Border.VerticalAlignment>
                                Stretch
                            </Border.VerticalAlignment>
                            <Border.HorizontalAlignment>
                                Stretch
                            </Border.HorizontalAlignment>
                            <Border.BorderThickness>
                                0
                            </Border.BorderThickness>
                        </Border>

                        <!-- Overlay -->
                        <Border x:Name="toggleMaxRestoreOverlay" Background="Transparent" BorderBrush="Transparent" BorderThickness="0"/>
                    </Grid>

                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="toggleMaxRestoreOverlay" Property="BorderBrush" Value="{DynamicResource GrayThemeUI.Overlay.BorderBrush.MouseOver}"/>
                            <Setter TargetName="toggleMaxRestoreOverlay" Property="Background" Value="{DynamicResource GrayThemeUI.Overlay.Background.MouseOver}"/>
                            <Setter TargetName="toggleMaxRestoreOverlayMask" Property="Background" Value="{DynamicResource GrayThemeUI.Overlay.Mask.MouseOver}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="toggleMaxRestoreOverlay" Property="BorderBrush" Value="{DynamicResource GrayThemeUI.Overlay.BorderBrush.Focus}"/>
                            <Setter TargetName="toggleMaxRestoreOverlay" Property="Background" Value="{DynamicResource GrayThemeUI.Overlay.Background.Focus}"/>
                            <Setter TargetName="toggleMaxRestoreOverlayMask" Property="Background" Value="{DynamicResource GrayThemeUI.Overlay.Mask.Focus}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <!-- ToggleButton -->
    <Style x:Key="GrayThemeUI.ToggleButton.Square" TargetType="ToggleButton">
        <Setter Property="FontSize" Value="{DynamicResource GrayThemeUI.Common.FontSize.Default}"/>
        <Setter Property="BorderThickness" Value="{DynamicResource GrayThemeUI.Common.BorderThickness}"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="Foreground" Value="{DynamicResource GrayThemeUI.Theme.Foreground}"/>
        <Setter Property="Background" Value="{DynamicResource GrayThemeUI.Theme.Background}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ToggleButton">
                    <Grid>
                        <Border x:Name="border" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" HorizontalAlignment="Stretch" VerticalAlignment="Stretch"/>
                        <Border x:Name="overlay" Background="Transparent" BorderBrush="Transparent" BorderThickness="{TemplateBinding BorderThickness}" HorizontalAlignment="Stretch" VerticalAlignment="Stretch"/>
                        <ContentPresenter Margin="5" HorizontalAlignment="{TemplateBinding HorizontalAlignment}" VerticalAlignment="{TemplateBinding VerticalAlignment}" Content="{TemplateBinding Content}"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="overlay" Property="BorderBrush" Value="{DynamicResource GrayThemeUI.Overlay.BorderBrush.MouseOver}"/>
                            <Setter TargetName="overlay" Property="Background" Value="{DynamicResource GrayThemeUI.Overlay.Background.MouseOver}"/>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter TargetName="overlay" Property="BorderBrush" Value="{DynamicResource GrayThemeUI.Overlay.BorderBrush.Focus}"/>
                            <Setter TargetName="overlay" Property="Background" Value="{DynamicResource GrayThemeUI.Overlay.Background.Focus}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="overlay" Property="BorderBrush" Value="{DynamicResource GrayThemeUI.Overlay.BorderBrush.Disable}"/>
                            <Setter TargetName="overlay" Property="Background" Value="{DynamicResource GrayThemeUI.Overlay.Background.Disable}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!-- ImageMask ToggleButton  -->
    <Style x:Key="GrayThemeUI.ToggleButton.ImageMask" TargetType="ToggleButton">
        <Setter Property="FontSize" Value="{DynamicResource GrayThemeUI.Common.FontSize.Default}"/>
        <Setter Property="BorderThickness" Value="{DynamicResource GrayThemeUI.Common.BorderThickness}"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Foreground" Value="{DynamicResource GrayThemeUI.Common.MaskColor}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ToggleButton">
                    <Grid Background="{TemplateBinding Background}">
                        <Border x:Name="border" Background="{TemplateBinding Foreground}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" OpacityMask="{TemplateBinding helper:ToggleButtonHelper.DefaultMask}" />
                        <Border x:Name="overlayMask" Background="Transparent" BorderBrush="Transparent" BorderThickness="{TemplateBinding BorderThickness}" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" OpacityMask="{TemplateBinding helper:ToggleButtonHelper.DefaultMask}"/>
                        <!-- Overlay -->
                        <Border x:Name="overlay" Background="Transparent" BorderBrush="Transparent" BorderThickness="0"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="overlay" Property="BorderBrush" Value="{DynamicResource GrayThemeUI.Overlay.BorderBrush.MouseOver}"/>
                            <Setter TargetName="overlay" Property="Background" Value="{DynamicResource GrayThemeUI.Overlay.Background.MouseOver}"/>
                            <Setter TargetName="overlayMask" Property="Background" Value="{DynamicResource GrayThemeUI.Overlay.Mask.MouseOver}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="overlay" Property="BorderBrush" Value="{DynamicResource GrayThemeUI.Overlay.BorderBrush.Focus}"/>
                            <Setter TargetName="overlay" Property="Background" Value="{DynamicResource GrayThemeUI.Overlay.Background.Focus}"/>
                            <Setter TargetName="overlayMask" Property="Background">
                                <Setter.Value>
                                    <DynamicResource ResourceKey="GrayThemeUI.Overlay.Mask.Focus"/>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter TargetName="border" Property="OpacityMask">
                                <Setter.Value>
                                    <Binding>
                                        <Binding.Path>
                                            (helper:ToggleButtonHelper.CheckedMask)
                                        </Binding.Path>
                                        <Binding.RelativeSource>
                                            <RelativeSource Mode="TemplatedParent"/>
                                        </Binding.RelativeSource>
                                    </Binding>
                                </Setter.Value>
                            </Setter>
                            <Setter TargetName="overlayMask" Property="OpacityMask">
                                <Setter.Value>
                                    <Binding>
                                        <Binding.Path>
                                            (helper:ToggleButtonHelper.CheckedMask)
                                        </Binding.Path>
                                        <Binding.RelativeSource>
                                            <RelativeSource Mode="TemplatedParent"/>
                                        </Binding.RelativeSource>
                                    </Binding>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="False">
                            <Setter TargetName="border" Property="OpacityMask">
                                <Setter.Value>
                                    <Binding>
                                        <Binding.Path>
                                            (helper:ToggleButtonHelper.DefaultMask)
                                        </Binding.Path>
                                        <Binding.RelativeSource>
                                            <RelativeSource Mode="TemplatedParent"/>
                                        </Binding.RelativeSource>
                                    </Binding>
                                </Setter.Value>
                            </Setter>
                            <Setter TargetName="overlayMask" Property="OpacityMask">
                                <Setter.Value>
                                    <Binding>
                                        <Binding.Path>
                                            (helper:ToggleButtonHelper.DefaultMask)
                                        </Binding.Path>
                                        <Binding.RelativeSource>
                                            <RelativeSource Mode="TemplatedParent"/>
                                        </Binding.RelativeSource>
                                    </Binding>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="overlay" Property="BorderBrush">
                                <Setter.Value>
                                    <DynamicResource ResourceKey="GrayThemeUI.Overlay.BorderBrush.Disable"/>
                                </Setter.Value>
                            </Setter>
                            <Setter TargetName="overlay" Property="Background">
                                <Setter.Value>
                                    <DynamicResource ResourceKey="GrayThemeUI.Overlay.Background.Disable"/>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
</ResourceDictionary>